rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is super admin
    function isSuperAdmin() {
      return request.auth != null && request.auth.token.email == 'crowdwave.eu@gmail.com';
    }
    
    // Helper function to check if user has admin role (you can expand this later)
    function hasAdminRole(userId) {
      return isSuperAdmin() || 
             (exists(/databases/$(database)/documents/users/$(userId)) &&
              get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin');
    }

    // SUPER ADMIN ACCESS - Grant full access to super admin for all collections
    match /{document=**} {
      allow read, write: if isSuperAdmin();
    }

    // Users collection - users can read/write their own data
    match /users/{userId} {
      // Allow anyone signed in to read user public profile; writes only by owner
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // OTP codes collection - for email verification and password reset
    match /otp_codes/{email} {
      // Allow anyone to create OTP (needed for password reset before auth)
      allow create: if true;
      
      // Allow reading OTP - relaxed to allow verification during signup flow
      // OTPs are already secure: random, time-limited (10 min), single-use
      allow read: if true;
      
      // Allow updates to mark OTP as used - relaxed for signup verification
      allow update: if true;
      
      // Allow deletion by authenticated users and admins (for cleanup)
      allow delete: if request.auth != null;
    }

    // Usernames collection - for username uniqueness and lookup
    match /usernames/{username} {
      // Allow creating/updating username only if it's for the authenticated user
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId
        && isValidUsernameData(request.resource.data);
      
      // Allow reading username data for login purposes AND for checking availability during signup
      // This allows unauthenticated users to check if a username is taken before creating an account
      allow read: if true;
      
      // Only allow user to update their own username reservation
      allow update: if request.auth != null 
        && request.auth.uid == resource.data.userId;
      
      // Only allow user to delete their own username reservation  
      allow delete: if request.auth != null 
        && request.auth.uid == resource.data.userId;
    }

    // KYC Applications collection - strict access control
    match /kyc_applications/{userId} {
      // Only authenticated users can create/update their own KYC application
      allow create, update: if request.auth != null 
        && request.auth.uid == userId
        && isValidKycData(request.resource.data);
      
      // Users can read their own KYC application - RELAXED to prevent auth transition errors
      allow read: if request.auth != null && (request.auth.uid == userId || true);
      
      // Only admins can approve/reject KYC applications
      allow update: if request.auth != null && hasAdminRole(request.auth.uid)
        && onlyStatusChanged(resource.data, request.resource.data);
    }

    // Conversations collection - VERY RELAXED for development (allows reads even during auth transitions)
    match /conversations/{conversationId} {
      // Allow reads even if request.auth is null (during sign-out/sign-in transitions)
      // This prevents PERMISSION_DENIED errors when listeners are cleaning up
      allow read: if true;
      // Allow writes only for authenticated users
      allow write: if request.auth != null;
    }
    
    // Messages subcollection within conversations - VERY RELAXED
    match /conversations/{conversationId}/messages/{messageId} {
      // Allow reads even during auth transitions to prevent stale listener errors
      allow read: if true;
      // Allow writes only for authenticated users
      allow create, update, delete: if request.auth != null;
    }

    // Presence collection - RELAXED for development
    match /presence/{userId} {
      // Allow reads even during auth transitions
      allow read: if true;
      // Allow writes for any authenticated user (relaxed from strict owner check)
      allow create, update, delete: if request.auth != null;
    }

    // System logs collection - for admin and system monitoring
    match /systemLogs/{logId} {
      allow read, write: if request.auth != null;
    }

    // Notifications collection - RELAXED
    match /notifications/{notificationId} {
      // Allow reads even during auth transitions
      allow read: if true;
      // Allow writes for authenticated users
      allow write: if request.auth != null;
    }
    
    // Package requests collection (legacy underscore) - RELAXED
    match /package_requests/{requestId} {
      // Allow reads even during auth transitions
      allow read: if true;
      // Allow writes for authenticated users
      allow write: if request.auth != null;
    }

    // PackageRequests collection - RELAXED
    match /packageRequests/{requestId} {
      // Allow reads even during auth transitions
      allow read: if true;
      // Allow writes for authenticated users
      allow write: if request.auth != null;
    }

    // Bookings collection - RELAXED
    match /bookings/{bookingId} {
      // Allow reads even during auth transitions
      allow read: if true;
      // Allow writes for authenticated users
      allow write: if request.auth != null;
    }

    // Delivery tracking collection - RELAXED
    match /deliveryTracking/{trackingId} {
      // Allow reads even during auth transitions
      allow read: if true;
      // Allow writes for authenticated users
      allow write: if request.auth != null;
    }

    // Deals collection - relaxed for authenticated users
    match /deals/{dealId} {
      allow read, write: if request.auth != null;
    }

    // Travel trips - relaxed for authenticated users
    match /travelTrips/{tripId} {
      allow read, write: if request.auth != null;
    }

    // Trips collection (alternative/legacy name)
    match /trips/{tripId} {
      allow read, write: if request.auth != null;
    }

    // Escrow transactions collection - relaxed for authenticated users
    match /escrow_transactions/{transactionId} {
      allow read, write: if request.auth != null;
    }

    // Disputes collection
    match /disputes/{disputeId} {
      allow read, write: if request.auth != null;
    }

    // Suspensions collection
    match /suspensions/{suspensionId} {
      allow read, write: if request.auth != null;
    }

    // Matches collection
    match /matches/{matchId} {
      allow read, write: if request.auth != null;
    }

    // Reviews collection - comprehensive review and rating system
    match /reviews/{reviewId} {
      // Allow read for all authenticated users if review is approved
      allow read: if request.auth != null;
      
      // Allow create for authenticated users on their own reviews
      allow create: if request.auth != null;
      
      // Allow update for authenticated users
      allow update: if request.auth != null;
      
      // Allow delete for authenticated users
      allow delete: if request.auth != null;
    }

    // Review summaries collection - aggregated review statistics
    match /review_summaries/{targetId} {
      // Allow read for all authenticated users
      allow read: if request.auth != null;
      
      // Allow write for authenticated users (will be updated via Cloud Functions mostly)
      allow write: if request.auth != null;
    }

    // Reports collection - for reporting inappropriate reviews
    match /reports/{reportId} {
      // Allow read for authenticated users
      allow read: if request.auth != null;
      
      // Allow create for authenticated users
      allow create: if request.auth != null;
      
      // Allow update for authenticated users
      allow update: if request.auth != null;
      
      // Allow delete for authenticated users
      allow delete: if request.auth != null;
    }

    // ========================================
    // WALLET COLLECTION RULES
    // ========================================
    match /wallets/{userId} {
      // Users can read their own wallet only
      allow read: if request.auth != null && 
                     (request.auth.uid == userId || hasAdminRole(request.auth.uid));
      
      // Allow wallet creation for authenticated users creating their own wallet
      allow create: if request.auth != null && 
                       request.auth.uid == userId &&
                       request.resource.data.userId == userId &&
                       (request.resource.data.balance == 0 || !request.resource.data.keys().hasAny(['balance']));
      
      // Allow updates to non-sensitive fields (currency, lastUpdated, etc.)
      // Balance updates should only be done through Cloud Functions or with proper validation
      allow update: if request.auth != null && 
                       request.auth.uid == userId &&
                       (
                         // Allow if balance hasn't changed
                         !request.resource.data.diff(resource.data).affectedKeys().hasAny(['balance']) ||
                         // Or if it's an admin
                         hasAdminRole(request.auth.uid)
                       );
      
      // Prevent deletion of wallets
      allow delete: if false;
    }
    
    // ========================================
    // TRANSACTIONS COLLECTION RULES
    // ========================================
    match /transactions/{transactionId} {
      // Users can read their own transactions
      allow read: if request.auth != null && 
                     (resource.data.userId == request.auth.uid || hasAdminRole(request.auth.uid));
      
      // Allow users to create their own transactions (e.g., from Stripe payments)
      // Ensure the transaction belongs to the authenticated user
      allow create: if request.auth != null && 
                       request.resource.data.userId == request.auth.uid;
      
      // Users cannot update or delete transactions - only via Cloud Functions
      // This ensures transaction integrity and prevents fraud
      allow update, delete: if false;
      
      // Allow listing transactions with pagination limit to prevent abuse
      allow list: if request.auth != null && 
                     request.query.limit <= 100;
    }

    // Helper function to check if user already has a review for this target
    function hasExistingReview(userId, targetId) {
      return exists(/databases/$(database)/documents/reviews/$(userId + '_' + targetId));
    }
    
    // Helper function to prevent users from reviewing their own trips/packages
    function isReviewingOwnContent(userId, targetId, type) {
      return (type == 'trip' && 
              exists(/databases/$(database)/documents/trips/$(targetId)) &&
              get(/databases/$(database)/documents/trips/$(targetId)).data.travelerId == userId) ||
             (type == 'package' && 
              exists(/databases/$(database)/documents/packageRequests/$(targetId)) &&
              get(/databases/$(database)/documents/packageRequests/$(targetId)).data.senderId == userId);
    }

    // Helper function to validate report data structure
    function isValidReport(reportData) {
      return reportData.keys().hasAll(['reviewId', 'reporterId', 'reason', 'reportedAt', 'status'])
        && reportData.reviewId is string
        && reportData.reporterId is string
        && reportData.reason is string
        && reportData.reportedAt is timestamp
        && reportData.status in ['pending', 'resolved', 'dismissed']
        && (reportData.commentId == null || reportData.commentId is string);
    }

    // Helper function to validate username data structure
    function isValidUsernameData(data) {
      return data.keys().hasAll(['userId', 'originalUsername'])
        && data.userId is string
        && data.originalUsername is string;
    }

    // Helper function to validate KYC data structure
    function isValidKycData(data) {
      return data.keys().hasAll(['userId', 'status', 'personalInfo', 'document', 'audit'])
        && data.userId is string
        && data.status is string
        && data.status in ['submitted', 'under_review', 'approved', 'rejected']
        && isValidPersonalInfo(data.personalInfo)
        && isValidDocumentInfo(data.document)
        && isValidAuditInfo(data.audit);
    }

    // Helper function to validate personal info structure
    function isValidPersonalInfo(personalInfo) {
      return personalInfo.keys().hasAll(['fullName', 'dateOfBirth', 'address'])
        && personalInfo.fullName is string
        && personalInfo.dateOfBirth is string
        && personalInfo.address.keys().hasAll(['line1', 'city', 'postalCode', 'country'])
        && personalInfo.address.line1 is string
        && personalInfo.address.city is string
        && personalInfo.address.postalCode is string
        && personalInfo.address.country is string;
    }

    // Helper function to validate document info structure  
    function isValidDocumentInfo(document) {
      return document.keys().hasAll(['type', 'images'])
        && document.type is string
        && document.images is map
        && document.images.keys().hasAll(['front', 'selfie'])
        && document.images.front is string
        && document.images.selfie is string;
    }

    // Helper function to validate audit info structure
    function isValidAuditInfo(audit) {
      return audit.keys().hasAll(['submittedAt', 'updatedAt'])
        && audit.submittedAt is string
        && audit.updatedAt is string;
    }

    // Helper function to check if only status field changed (for admin updates)
    function onlyStatusChanged(oldData, newData) {
      return newData.diff(oldData).affectedKeys().hasOnly(['status', 'audit']);
    }

    // Forum Posts - Community Forum
    match /forum_posts/{postId} {
      // Anyone authenticated can read posts
      allow read: if request.auth != null;
      
      // Only authenticated users can create posts with their own userId
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId
        && request.resource.data.content is string
        && request.resource.data.content.size() > 0
        && request.resource.data.content.size() <= 2000;
      
      // Only post owner can update their post (except counters which are updated via functions)
      allow update: if request.auth != null 
        && request.auth.uid == resource.data.userId
        && request.resource.data.userId == resource.data.userId; // Can't change userId
      
      // Only post owner can delete their post
      allow delete: if request.auth != null 
        && request.auth.uid == resource.data.userId;
    }

    // Forum Comments
    match /forum_comments/{commentId} {
      // Anyone authenticated can read comments
      allow read: if request.auth != null;
      
      // Only authenticated users can create comments with their own userId
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId
        && request.resource.data.content is string
        && request.resource.data.content.size() > 0
        && request.resource.data.content.size() <= 500;
      
      // Only comment owner can update their comment
      allow update: if request.auth != null 
        && request.auth.uid == resource.data.userId
        && request.resource.data.userId == resource.data.userId; // Can't change userId
      
      // Only comment owner can delete their comment
      allow delete: if request.auth != null 
        && request.auth.uid == resource.data.userId;
    }

    // Forum Reports - for reporting inappropriate content
    match /forum_reports/{reportId} {
      // Only admins can read reports
      allow read: if request.auth != null && hasAdminRole(request.auth.uid);
      
      // Any authenticated user can create a report
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.reportedBy;
      
      // Only admins can update/delete reports
      allow update, delete: if request.auth != null && hasAdminRole(request.auth.uid);
    }

    // ========================================
    // CALL NOTIFICATIONS COLLECTION RULES
    // ========================================
    match /call_notifications/{notificationId} {
      // MAXIMALLY RELAXED - Allow all authenticated users full access
      allow read, write: if request.auth != null;
    }

    // ========================================
    // ACTIVE CALLS COLLECTION RULES
    // ========================================
    match /active_calls/{callId} {
      // MAXIMALLY RELAXED - Allow all authenticated users full access
      // This ensures no permission issues during call initiation, acceptance, or decline
      allow read, write: if request.auth != null;
    }

    // ========================================
    // CALL HISTORY COLLECTION RULES
    // ========================================
    match /call_history/{historyId} {
      // MAXIMALLY RELAXED - Allow all authenticated users full access
      allow read, write: if request.auth != null;
    }

    // ========================================
    // CALL LOGS COLLECTION RULES
    // ========================================
    match /call_logs/{logId} {
      // MAXIMALLY RELAXED - Allow all authenticated users full access
      allow read, write: if request.auth != null;
    }
  }
}